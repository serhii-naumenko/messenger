{"version":3,"sources":["redux/reducer.ts","redux/store.ts","components/PhotoCheck/PhotoCheck.tsx","components/AnswerFrom/AnswerFrom.tsx","components/MyReply/MyReply.tsx","components/Chat/Chat.tsx","components/Contacts/Contacts.tsx","api/api.ts","components/Message/Message.tsx","components/MyInfo/MyInfo.tsx","components/Subscriber/Subscriber.tsx","App.tsx","index.tsx"],"names":["contactsInfoFromStorage","localStorage","getItem","contactsStart","startContactsInfo","JSON","parse","chosenContactFromStorage","oneContactStart","initialState","contactsInfo","chosenContact","queryForSearch","answerFromChack","occasionReducer","createSlice","name","reducers","setcontactsInfo","state","action","payload","setchosenContact","setQueryForSearch","setAnswerFromChack","selectors","actions","reducer","store","configureStore","PhotoCheck","imageFace","className","src","alt","AnswerFrom","photoOfÐ¡ompanion","textCompanion","dateCompanion","moment","format","MyReply","myText","myTime","Chat","chosenContactRedux","useSelector","useState","bottomRef","useRef","useEffect","current","scrollIntoView","behavior","dialog","map","message","index","isAnswer","picture","text","time","ref","Contacts","querySearch","contactsToRender","setContactsToRender","dispatch","useDispatch","query","visibleContacts","filter","contact","toUpperCase","includes","handlerChoseContact","useCallback","contactForDialog","find","prevContact","id","setItem","stringify","type","onClick","length","getAnswerFromChack","a","fetch","method","response","json","catch","error","Error","result","Message","setQuery","answer","setAnswer","handlerChangeInput","newQuery","getAnswer","contactToUpdate","nextAnswer","allContactsRedux","setTimeout","console","log","updatedChosenContact2","newContactsInfo2","updatedChosenContact","answerChackServer","value","handlerSubmit","event","preventDefault","myMessage","target","oneContactRedux","trim","newContactsInfo","onSubmit","title","placeholder","onChange","MyInfo","htmlFor","Subscriber","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9637f56e.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { OneContactInfo } from '../OneContactInfoType';\nimport { startContactsInfo } from '../StartContacts.json';\n\nconst contactsInfoFromStorage = localStorage.getItem('contacts');\nlet contactsStart: OneContactInfo[] = startContactsInfo;\n\nif (contactsInfoFromStorage !== null) {\n  contactsStart = JSON.parse(contactsInfoFromStorage);\n}\n\nconst chosenContactFromStorage = localStorage.getItem('chosenContact');\nlet oneContactStart: OneContactInfo = startContactsInfo[0];\n\nif (chosenContactFromStorage !== null) {\n  oneContactStart = JSON.parse(chosenContactFromStorage);\n}\n\ninterface InitialState {\n  contactsInfo: OneContactInfo[],\n  chosenContact: OneContactInfo,\n  queryForSearch: string,\n  answerFromChack: string,\n}\n\nconst initialState: InitialState = {\n  contactsInfo: [...contactsStart],\n  chosenContact: oneContactStart,\n  queryForSearch: '',\n  answerFromChack: '',\n};\n\nconst occasionReducer = createSlice({\n  name: 'contactInao',\n  initialState,\n  reducers: {\n    setcontactsInfo: (state, action) => {\n      return {\n        ...state,\n        contactsInfo: action.payload,\n      };\n    },\n    setchosenContact: (state, action) => {\n      return {\n        ...state,\n        chosenContact: action.payload,\n      };\n    },\n    setQueryForSearch: (state, action) => {\n      return {\n        ...state,\n        queryForSearch: action.payload,\n      };\n    },\n    setAnswerFromChack: (state, action) => {\n      return {\n        ...state,\n        answerFromChack: action.payload,\n      };\n    },\n  },\n});\n\nexport const selectors = {\n  loadedContactsInfo: (state: InitialState) => state.contactsInfo,\n  chosenContact: (state: InitialState) => state.chosenContact,\n  queryForSearch: (state: InitialState) => state.queryForSearch,\n  answerFromChack: (state: InitialState) => state.answerFromChack,\n};\n\nexport const {\n  setcontactsInfo,\n  setchosenContact,\n  setQueryForSearch,\n  setAnswerFromChack,\n} = occasionReducer.actions;\n\nexport const { reducer } = occasionReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport { reducer } from './reducer';\n\nconst store = configureStore({ reducer });\n\nexport default store;\n","import React from 'react';\nimport './PhotoCheck.scss';\n\ntype Props = {\n  imageFace: string,\n};\n\nexport const PhotoCheck: React.FC<Props> = ({ imageFace }) => {\n  return (\n    <div className=\"PhotoCheck\">\n      <div className=\"PhotoCheck__icon\"></div>\n      <div className=\"PhotoCheck__photo\">\n        <img\n          src={imageFace}\n          alt=\"face of contact\"\n          className=\"PhotoCheck__image\"\n        />\n      </div>\n    </div>\n  );\n};\n","import moment from 'moment';\nimport React from 'react';\nimport { PhotoCheck } from '../PhotoCheck';\nimport './AnswerFrom.scss';\n\ntype Props = {\n  photoOfÐ¡ompanion: string,\n  textCompanion: string,\n  dateCompanion: string,\n};\n\nexport const AnswerFrom: React.FC<Props> = ({\n  photoOfÐ¡ompanion,\n  textCompanion,\n  dateCompanion,\n}) => {\n  return (\n    <div className=\"AnswerFrom\">\n      <div className=\"AnswerFrom__firstLine\">\n        <PhotoCheck imageFace={photoOfÐ¡ompanion} />\n        <div className=\"AnswerFrom__text-container\">\n          <p className=\"AnswerFrom__text\">\n            {textCompanion}\n          </p>\n        </div>\n      </div>\n      <p className=\"AnswerFrom__date\">\n        {moment(`${dateCompanion}`, 'M/DD/YY HH:mm:ss A').format('M/DD/YY HH:mm A')}\n      </p>\n    </div>\n  );\n};\n","import moment from 'moment';\nimport React from 'react';\nimport './MyReply.scss';\n\ntype Props = {\n  myText: string,\n  myTime: string,\n};\n\nexport const MyReply: React.FC<Props> = ({\n  myText,\n  myTime,\n}) => {\n  return (\n    <div className=\"MyReply\">\n      <div className=\"MyReply__text-container\">\n        <p className=\"MyReply__text\">\n          {myText}\n        </p>\n      </div>\n      <p className=\"MyReply__time\">\n        {moment(`${myTime}`, 'M/DD/YY HH:mm:ss A').format('M/DD/YY HH:mm A')}\n      </p>\n    </div>\n  );\n};\n","import React, { useEffect, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { AnswerFrom } from '../AnswerFrom';\nimport { MyReply } from '../MyReply';\nimport './Chat.scss';\nimport { selectors } from '../../redux/reducer';\n\nexport const Chat: React.FC = () => {\n  const chosenContactRedux = useSelector(selectors.chosenContact);\n  const [chosenContact, setchosenContact] = useState(chosenContactRedux);\n  const bottomRef = useRef<null | HTMLDivElement>(null);\n\n  useEffect(() => {\n    // ðï¸ scroll to bottom every time messages change\n    bottomRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [chosenContactRedux]);\n\n  useEffect(() => {\n    const contact = chosenContactRedux;\n\n    setchosenContact(contact);\n  }, [chosenContactRedux]);\n\n  return (\n    <ul className=\"Chat\">\n      {chosenContact.dialog.map((message, index) => (\n        <li\n          className=\"Chat__item\"\n          key={message.time}\n        >\n          {message.isAnswer && (\n            <AnswerFrom\n              photoOfÐ¡ompanion={chosenContactRedux.picture}\n              textCompanion={chosenContact.dialog[index].text}\n              dateCompanion={chosenContact.dialog[index].time}\n            />\n          )}\n          {!message.isAnswer && (\n            <MyReply\n              myText={chosenContact.dialog[index].text}\n              myTime={chosenContact.dialog[index].time}\n            />\n          )}\n          <div ref={bottomRef} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport moment from 'moment';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PhotoCheck } from '../PhotoCheck';\nimport './Contacts.scss';\nimport { selectors, setchosenContact } from '../../redux/reducer';\n\nexport const Contacts: React.FC = () => {\n  const startContactsInfo = useSelector(selectors.loadedContactsInfo);\n  const querySearch = useSelector(selectors.queryForSearch);\n  const [contactsToRender, setContactsToRender] = useState(startContactsInfo);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const query = querySearch;\n    const visibleContacts = startContactsInfo.filter((contact) => contact.name\n      .toUpperCase().includes(query.toUpperCase()));\n\n    setContactsToRender(visibleContacts);\n  }, [querySearch, startContactsInfo]);\n\n  const handlerChoseContact = useCallback((index) => {\n    const previousContactsInfo = startContactsInfo;\n    const contactForDialog = previousContactsInfo.find((prevContact) => {\n      return +prevContact.id === index;\n    });\n\n    if (contactForDialog) {\n      dispatch(setchosenContact(contactForDialog));\n      localStorage.setItem('chosenContact', JSON.stringify(contactForDialog));\n    }\n  }, [startContactsInfo]);\n\n  return (\n    <div className=\"Contacts\">\n      <h1 className=\"Contacts__title\">\n        Chats\n      </h1>\n      <ul className=\"Contacts__list\">\n        {contactsToRender.map((contact) => (\n          <li\n            className=\"Contacts__item\"\n            key={contact.id}\n          >\n            <button\n              type=\"button\"\n              className=\"Contacts__button\"\n              onClick={() => handlerChoseContact(+contact.id)}\n            >\n              <PhotoCheck imageFace={contact.picture} />\n              <div className=\"Contacts__info\">\n                <div className=\"Contacts__name-text\">\n                  <h3 className=\"Contacts__name\">\n                    {contact.name}\n                  </h3>\n                  <div className=\"Contacts__text-container\">\n                    <p className=\"Contacts__text\">\n                      {contact.dialog[contact.dialog.length - 1].text}\n                    </p>\n                  </div>\n                </div>\n                <p className=\"Contacts__date\">\n                  {moment(`${contact.dialog[contact.dialog.length - 1].time}`, 'M/DD/YY HH:mm a').format('MMM DD, YYYY')}\n                </p>\n              </div>\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","const API_URL = 'https://api.chucknorris.io/jokes/random';\n\ninterface Answer {\n  icon_url: string,\n  id: string,\n  url: string,\n  value: string,\n}\n\nexport const getAnswerFromChack = async (): Promise<Answer> => {\n  const response = await fetch(`${API_URL}`, { method: 'GET' });\n\n  const result = await response.json()\n    .catch((error) => {\n      throw Error(`${error}`);\n    });\n\n  return result;\n};\n","import moment from 'moment';\nimport React, { useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAnswerFromChack } from '../../api/api';\nimport { OneContactInfo } from '../../OneContactInfoType';\nimport {\n  selectors,\n  setAnswerFromChack,\n  setchosenContact,\n  setcontactsInfo,\n} from '../../redux/reducer';\nimport './Message.scss';\n\nexport const Message: React.FC = () => {\n  const [query, setQuery] = useState('');\n  const [answer, setAnswer] = useState('');\n  const contactsInfo = useSelector(selectors.loadedContactsInfo);\n  const chosenContactRedux = useSelector(selectors.chosenContact);\n  const dispatch = useDispatch();\n\n  const handlerChangeInput = useCallback((newQuery) => {\n    setQuery(newQuery);\n  }, [query]);\n\n  const getAnswer = useCallback((contactToUpdate, nextAnswer) => {\n    const allContactsRedux = [...contactsInfo];\n\n    setTimeout(() => {\n      // eslint-disable-next-line no-console\n      console.log(answer);\n      const updatedChosenContact2 = {\n        ...contactToUpdate,\n        dialog: [\n          ...contactToUpdate.dialog,\n          {\n            isAnswer: true,\n            text: nextAnswer,\n            time: moment().format('M/DD/YY HH:mm:ss A'),\n          },\n        ],\n      };\n\n      const newContactsInfo2 = [\n        updatedChosenContact2,\n        ...allContactsRedux.filter((contact) => contactToUpdate.id !== contact.id),\n      ];\n\n      dispatch(setchosenContact(updatedChosenContact2));\n      dispatch(setcontactsInfo(newContactsInfo2));\n      localStorage.setItem('contacts', JSON.stringify(newContactsInfo2));\n    }, 10000);\n  }, [contactsInfo, chosenContactRedux, answer]);\n\n  async function response(updatedChosenContact: OneContactInfo) {\n    const answerChackServer = await getAnswerFromChack();\n    const answerFromChack = {\n      ...answerChackServer,\n    };\n\n    setAnswer(answerFromChack.value);\n    dispatch(setAnswerFromChack(answerFromChack.value));\n    getAnswer(updatedChosenContact, answerFromChack.value);\n  }\n\n  const handlerSubmit = useCallback((event) => {\n    event.preventDefault();\n    const myMessage = event.target[0].value;\n    const oneContactRedux = { ...chosenContactRedux };\n    const allContactsRedux = [...contactsInfo];\n\n    if (myMessage.trim().length > 0) {\n      const updatedChosenContact = {\n        ...oneContactRedux,\n        dialog: [\n          ...oneContactRedux.dialog,\n          {\n            isAnswer: false,\n            text: myMessage,\n            time: moment().format('M/DD/YY HH:mm:ss A'),\n          },\n        ],\n      };\n\n      response(updatedChosenContact);\n\n      const newContactsInfo = [\n        updatedChosenContact,\n        ...allContactsRedux.filter((contact) => oneContactRedux.id !== contact.id),\n      ];\n\n      dispatch(setchosenContact(updatedChosenContact));\n      dispatch(setcontactsInfo(newContactsInfo));\n      setQuery('');\n      localStorage.setItem('contacts', JSON.stringify(newContactsInfo));\n\n      // eslint-disable-next-line no-console\n      console.log(newContactsInfo);\n    }\n  }, [contactsInfo, chosenContactRedux]);\n\n  return (\n    <div className=\"Message\">\n      <form\n        className=\"Message__form\"\n        onSubmit={(event) => handlerSubmit(event)}\n      >\n        <input\n          title=\"enter text of message\"\n          name=\"message\"\n          type=\"text\"\n          className=\"Message__input\"\n          placeholder=\"Type your message\"\n          value={query}\n          onChange={(event) => handlerChangeInput(event.target.value)}\n        />\n        <button\n          className=\"Message__button\"\n          title=\"send message\"\n          type=\"submit\"\n        >\n          <div className=\"Message__icon\"></div>\n        </button>\n      </form>\n    </div>\n  );\n};\n","import React, { useCallback, useState } from 'react';\nimport './MyInfo.scss';\nimport { useDispatch } from 'react-redux';\nimport { PhotoCheck } from '../PhotoCheck';\nimport { setQueryForSearch } from '../../redux/reducer';\n\nexport const MyInfo: React.FC = () => {\n  const dispatch = useDispatch();\n  const [query, setQuery] = useState('');\n\n  const handlerChangeInput = useCallback((newQuery) => {\n    setQuery(newQuery.trim());\n    dispatch(setQueryForSearch(newQuery.trim()));\n  }, [query]);\n\n  return (\n    <div className=\"MyInfo\">\n      <div className=\"MyInfo__container\">\n        <PhotoCheck imageFace=\"assets/images/testimonial-ava-3.jpg\" />\n      </div>\n      <label htmlFor=\"search\" className=\"MyInfo__search-groupe\">\n        <input\n          title=\"find conact or chat\"\n          name=\"search\"\n          type=\"text\"\n          id=\"search\"\n          className=\"MyInfo__search\"\n          placeholder=\"Search or start new chat\"\n          value={query}\n          onChange={(event) => handlerChangeInput(event.target.value)}\n        />\n        <div className=\"MyInfo__glass\"></div>\n      </label>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './Subscriber.scss';\nimport { useSelector } from 'react-redux';\nimport { PhotoCheck } from '../PhotoCheck';\nimport { selectors } from '../../redux/reducer';\n\nexport const Subscriber: React.FC = () => {\n  const chosenContactRedux = useSelector(selectors.chosenContact);\n  const [chosenContact, setchosenContact] = useState(chosenContactRedux);\n\n  useEffect(() => {\n    const contact = chosenContactRedux;\n\n    setchosenContact(contact);\n  }, [chosenContactRedux]);\n\n  return (\n    <div className=\"Subscriber\">\n      <PhotoCheck imageFace={chosenContact.picture} />\n      <h2 className=\"Subscriber__name\">\n        {chosenContact.name}\n      </h2>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { Chat } from './components/Chat';\nimport { Contacts } from './components/Contacts';\nimport { Message } from './components/Message';\nimport { MyInfo } from './components/MyInfo';\nimport { Subscriber } from './components/Subscriber';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__contact-groupe\">\n        <MyInfo />\n        <Contacts />\n      </div>\n      <div className=\"App__chat-groupe\">\n        <Subscriber />\n        <Chat />\n        <Message />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport { App } from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}